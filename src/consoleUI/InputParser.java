package consoleUI;

import java.util.Scanner;

/**
 * Η κλάση InputParser αποτελεί βοηθητική κλάση που περιέχει μεθόδους για λήψη δεδομένων απο τον χρήστη εμφανίζοντας κατάλληλα βοηθητικά μηνύματα και κάνοντας απαραίτητους ελέγχους.
 *
 * @author Ioannis Baraklilis
 * @author Alexandos Tsingos
 * @version 2020.11.28
 */
public class InputParser {
    private Scanner userInput; //  Ένα αντικείμενο τύπου Scanner που δέχεται είσοδο απο το System.in

    /**
     * Ο τυπικός κατασκευαστής που αρχικοποιεί τα δεδομένα της κλάσης InputParser.
     * Αρχικοποιεί τα δεδομένα της κλάσης ώστε να δέχεται είσοδο απο το System.in
     */
    public InputParser(){
        userInput = new Scanner(System.in);
    }

    /**
     * Τυπώνει ένα μήνυμα στον χρήστη και επιστρέφει την συμβολοσειρά που εκείνος δίνει.
     *
     * Αναλυτικά, τυπώνει στον χρήστη ενα μήνυμα και προχωράει στην επόμενη γραμμή και αφού τυπώσει έναν χαρακτήρα '{@code >}' και ένα κενό δέχεται μία συμβολοσειρά απο τον χρήστη την οποία επιστρέφει.
     * Το σύμβολο '{@code >}' αναπαριστά γραφικά ότι ο χρήστης πρέπει να παρέχει δεδομένα.
     *
     * @param userMessage το μήνυμα που θα εμφανιστεί στον χρήστη
     * @return την συμβολοσειρά που θα δώσει το χρήστης
     */
    public String prompt(String userMessage){
        System.out.println(userMessage); // Εκτύπωση μηνύματος προς τον χρήστη.
        System.out.print("> ");
        return userInput.nextLine(); // Διαβάζει και επιστρέφει την συμβολοσειρά που δέχεται απο την είσοδο.
    }

    /**
     * Τυπώνει έναν χαρακτήρα '{@code >}' δέχεται μία συμβολοσειρά απο τον χρήστη την οποία επιστρέφει.
     *
     * Τυπώνει τον χαρακτήρα '{@code >}' (και ένα κενό) για να παρασταθεί γραφικά ότι ο χρήστης πρέπει να παρέχει δεδομένα.
     *
     * @return την συμβολοσειρά που θα δώσει το χρήστης
     */
    public String prompt(){
        System.out.print("> ");
        return userInput.nextLine(); // Διαβάζει και επιστρέφει την συμβολοσειρά που δέχεται απο την είσοδο.
    }

    /**
     * Ελέγχει αν μία συμβολοσειρά είναι μία απο τις αποδεκτές εντολές - ενέργειες χρήστη που απο αυτές του ορίσματος.
     *
     * Αντιστοιχεί μία συμβολοσειρά σε σταθερά τύπου Command και ελέγχει αν είναι αποδεκτή ενέργεια.
     * Αν η ενέργεια που δίνεται απο τον χρήστη δεν αντιστοιχεί σε σταθερά τύπου Command, θεωρείται μή αποδεκτή ενέργεια.
     *
     * @param aPossibleCommand η συμβολοσειρά που θα ελεγχθεί για το αν είναι ενέργεια
     * @param acceptedCommands πίνακας με αποδεκτές ενέργειες
     * @return αν η συμβολοσειρά του ορίσματος είναι ενέργεια
     */
    private boolean isAcceptedCommand(String aPossibleCommand, Command[] acceptedCommands){
        Command aCommand = Command.valueOfGreek(aPossibleCommand); // Μετατροπή συμβολοσειράς σε σταθερά Command
        if (aCommand!=null){ // Ελέγχεται αν η συμβολοσειρά είναι μία απο τις ορισμένες σταθερές Command
            for(Command c : acceptedCommands){
                if(c == aCommand){ // Επίσης, ελέγχεται αν η εντολή είναι μια απο τις αποδεκτές εντολές του ορίσματος πίνακα
                    return true; // Είναι μία απο τις αποδεκτές εντολές, επιστρέφω true
                }
            }
            return false; // Δεν είναι απο τις αποδεκτές εντολές, επιστρέφω false
        }
        else{
            return false; // Η συμβολοειρά δεν είναι σταθερά Command, θεωρείται μή αποδεκτή και επιστρέφω false
        }

    }

    /**
     * Αφού τυπώσει στον χρήστη ένα μήνυμα, δέχεται μία ενέργεια (σε μορφή συμβολοσειράς) απο τον χρήστη και την μετατρέπει στην αντίστοιχή σταθερά Command και αν είναι αποδεκτή την επιστρέφει.
     *
     * Διαφορετικά, τυπώνει μήνυμα λάθους στον χρήστη και επαναλαμβάνεται η παραπάνω διαδικασία μέχρις ότου ο χρήστης να δώσει αποδεκτή ενέργεια.
     *
     * Αν η συμβολοσειρά που δίνει δεν αντιστοιχεί σε ενεργεία, θεωρείται μη αποδεκτή
     *
     * @param userMessage το μήνυμα που θα τυπώσει στον χρήστη
     * @param acceptedCommands ο πίνακας με τις αποδεκτές ενέργειες
     * @return μία σταθερά Command που αντιστοιχεί σε αποδεκτή ενέργεια που έδωσε ο χρήστης.
     */
    public Command promptCommand(String userMessage, Command[] acceptedCommands){
        boolean isIncomplete; // Μεταβλητή λήξης βρόχου
        String aPrompt = prompt(userMessage); // Διαβάζω συμβολοσειρά απο τον χρήστη
        System.out.println();
        isIncomplete = !isAcceptedCommand(aPrompt, acceptedCommands); // Ελέγχω αν η συμβολοσειρά είναι αποδεκτή εντολή
        while(isIncomplete){ // Ζητάω απο τον χρήστη να δώσει ενέργεια (εντολή) μέχρι να δώσει μία έγκυρη
            System.out.println("Λάθος είσοδος! Προσπάθησε ξανά..."); // Τυπώνω μήνυμα λάθους
            aPrompt = prompt(userMessage); // Ξαναδιαβάζω συμβολοσειρά
            System.out.println();
            isIncomplete = !isAcceptedCommand(aPrompt, acceptedCommands); // Ο βρόχος θα λήξει όταν ο χρήστης έχει δώσει αποδεκτή εντολή
        }
        return Command.valueOfGreek(aPrompt); // Μετατρέπω την (τελικά αποδεκτή) συμβολοσειρά στην αντίστοιχη σταθερά Command και την επιστρέφω
    }

    /**
     * Αφού τυπώσει στον χρήστη ένα μήνυμα, δέχεται έναν ακέραιο αριθμό και τον επιστρέφει αν είναι θετικός.
     * Άν ο αριθμός που δόθηκε απο τον χρήστη δεν είναι θετικός, θα τυπωθεί αντίστοιχο μήνυμα λάθους και θα επαναληφθεί η παραπάνω διαδικασία.
     *
     * Η είσοδος απο τον χρήστη γίνεται μέσω της μεθόδου prompt(String) της παρούσας κλάσης.
     *
     * @param userMessage το μήνυμα που θα τυπωθεί στον χρήστη
     * @return ο ακέραιος θετικός αριθμός που έδωσε ο χρήστης
     */
    public int promptPositiveInt(String userMessage){
        int aPositiveNumber = Integer.parseInt(prompt(userMessage)); // Εισάγω μία συμβολοσειρά απο τον χρήστη, την μετατρέπω σε αριθμό και τον αποθηκεύω.
        System.out.println();
        while(aPositiveNumber<=0){ // Ελέγχω αν ο αριθμός είναι μη θετικός
            System.out.println("Πρέπει να δώσεις θετικό αριθμό!");
            aPositiveNumber = Integer.parseInt(prompt(userMessage)); // Εισάγω πάλι μία συμβολοσειρά απο τον χρήστη, την μετατρέπω σε αριθμό και τον αποθηκεύω.
            System.out.println();
        }
        return aPositiveNumber; // Ο αριθμός είναι σίγουρα θετικός, το επιστρέφω.
    }

    /**
     * Αφού τυπώσει στον χρήστη ένα μήνυμα, δέχεται έναν ακέραιο αριθμό και τον επιστρέφει αν είναι εντός ορίων.
     * Άν ο αριθμός που δόθηκε απο τον χρήστη είναι εκτός ορίων, θα τυπωθεί αντίστοιχο μήνυμα λάθους και θα επαναληφθεί η παραπάνω διαδικασία.
     *
     * Η είσοδος απο τον χρήστη γίνεται μέσω της μεθόδου prompt(String) της παρούσας κλάσης.
     *
     * @param userMessage το μήνυμα που θα τυπωθεί στον χρήστη
     * @param low το κάτω όριο τιμών που μπορεί να δώσει ο χρήστης (συμπεριλαμβάνεται)
     * @param high το άνω όριο τιμών που μπορεί να δώσει ο χρήστης (συμπεριλαμβάνεται)
     * @return ο ακέραιος αριθμός που έδωσε ο χρήστης (εντός ορίων ορισμάτων)
     */
    public int promptIntInRange(String userMessage,int low, int high){
        int aNumber = Integer.parseInt(prompt(userMessage)); // Διαβάζω ακέραιο απο τον χρήστη ως συμβολοσειρά και τον αποθηκεύω αφού τον μετατρέψω
        System.out.println();
        while(aNumber<low || aNumber>high ){ // Η επανάληψη συνεχίζεται όσο ο χρήστης δίνει αριθμό εντός ορίων
            System.out.println("Πρέπει να δώσεις ακέραιο αριθμό από " + low + " μέχρι και " + high);
            aNumber = Integer.parseInt(prompt(userMessage));
            System.out.println();
        }
        return aNumber; // Επιστρέφω τον (τελικά) εντός ορίων ακέραιο
    }

    /**
     * Δέχεται απο τον χρήστη μία συμβολοσειρά και άν αυτή αντιστοιχεί σε έναν απο τους αριθμούς 1, 2, 3 ή 4, επιστρέφει τον αντίστοιχο αριθμό.
     * Άν δώσει οποιαδήποτε άλλη συμβολοσειρά, αγνοείται και επαναλαβάνεται η παραπάνω διαδικασία.
     *
     * Σημειώνεται ότι δεν τυπώνεται κάποιο μήνυμα προς τον χρήστη, απλά περιμένει (σιωπηρά) να δώσει εκείνος κατάλληλη τιμή αγνοώντας τυχόν μη αποδεκτές εισόδους.
     *
     * Η είσοδος απο τον χρήστη γίνεται μέσω της μεθόδου prompt() της παρούσας κλάσης.
     *
     * @return αριθμός που έδωσε ο χρήστης (είναι ένας απο τους 1, 2, 3, 4) ή μήνυμα λάθους
     */
    public int promptAnswer(){
        boolean isIncomplete = true; // Η μεταβλητή που ελέγει τον βρόχο
        String aPrompt;
        int answer = 0; // Η μεταβλητή που αποθηκεύει τον αριθμό που θα επιστραφεί τελικά

        do{ // Κάνω επανάληψη μέχρι ο χρήστης να δώσει έναν απο τους αριθμούς 1, 2, 3 ή 4
            aPrompt = prompt(); // Διαβάζω είσοδο χρήστη
            System.out.println();
            switch (aPrompt){ // Μετατρέπω είσοδο σε αριθμό και σταματάω την επανάληψη αν χρειαστεί
                case "1":
                    answer = 1;
                    isIncomplete = false;
                    break;
                case "2":
                    answer = 2;
                    isIncomplete = false;
                    break;
                case "3":
                    answer = 3;
                    isIncomplete = false;
                    break;
                case "4":
                    answer = 4;
                    isIncomplete = false;
                    break;
                default:
                    System.out.println("Μη έγκυρη απάντηση...");
                    System.out.println("Επέλεξε 1, 2, 3 ή 4.");
                    break;
            }
        } while(isIncomplete);

        return  answer; // Επιστρέφω αποτέλεσμα
    }
}
